--- target/expected_output/basic/akka/rk/buh/is/it/A.java
+++ target/expected_output/basic/akka/rk/buh/is/it/A.java
@@ -48,13 +48,13 @@
     public  class NonStatic {
       public   NonStatic ()  { throw new RuntimeException(); }
     }
+    public  akka.rk.buh.is.it.A.D$.E$ E ()  { throw new RuntimeException(); }
     public   D$ ()  { throw new RuntimeException(); }
     /**
      * def A.D.math
      * @return (undocumented)
      */
     public  long math ()  { throw new RuntimeException(); }
-    public  akka.rk.buh.is.it.A.D$.E$ E ()  { throw new RuntimeException(); }
   }
   /**
    * class A.B
@@ -103,8 +103,8 @@
    * class A.C
    */
   static public  class C1 {
-    public   C1 ()  { throw new RuntimeException(); }
     public  akka.rk.buh.is.it.A.C1$C1$ C1 ()  { throw new RuntimeException(); }
+    public   C1 ()  { throw new RuntimeException(); }
   }
   /**
    * object C1
@@ -142,6 +142,11 @@
   static public  java.lang.String stattic ()  { throw new RuntimeException(); }
   static public  java.lang.Object x ()  { throw new RuntimeException(); }
   /**
+   * Accessor for nested Scala object
+   * @return (undocumented)
+   */
+  public  akka.rk.buh.is.it.A.D$ D ()  { throw new RuntimeException(); }
+  /**
    * varargs
    * @param s (undocumented)
    * @return (undocumented)
@@ -214,9 +219,4 @@
    */
   public  int testthrows () throws java.lang.IllegalArgumentException, java.lang.NullPointerException { throw new RuntimeException(); }
   public  scala.runtime.Null$ getNull ()  { throw new RuntimeException(); }
-  /**
-   * Accessor for nested Scala object
-   * @return (undocumented)
-   */
-  public  akka.rk.buh.is.it.A.D$ D ()  { throw new RuntimeException(); }
 }
--- target/expected_output/basic/akka/actor/Identify.java
+++ target/expected_output/basic/akka/actor/Identify.java
@@ -2,6 +2,30 @@
 public final class Identify implements scala.Product, scala.Serializable {
   static public  akka.actor.Identify apply (Object messageId)  { throw new RuntimeException(); }
   static public  scala.Option<java.lang.Object> unapply (akka.actor.Identify x$0)  { throw new RuntimeException(); }
+  static public  boolean apply$mcZD$sp (double v1)  { throw new RuntimeException(); }
+  static public  double apply$mcDD$sp (double v1)  { throw new RuntimeException(); }
+  static public  float apply$mcFD$sp (double v1)  { throw new RuntimeException(); }
+  static public  int apply$mcID$sp (double v1)  { throw new RuntimeException(); }
+  static public  long apply$mcJD$sp (double v1)  { throw new RuntimeException(); }
+  static public  void apply$mcVD$sp (double v1)  { throw new RuntimeException(); }
+  static public  boolean apply$mcZF$sp (float v1)  { throw new RuntimeException(); }
+  static public  double apply$mcDF$sp (float v1)  { throw new RuntimeException(); }
+  static public  float apply$mcFF$sp (float v1)  { throw new RuntimeException(); }
+  static public  int apply$mcIF$sp (float v1)  { throw new RuntimeException(); }
+  static public  long apply$mcJF$sp (float v1)  { throw new RuntimeException(); }
+  static public  void apply$mcVF$sp (float v1)  { throw new RuntimeException(); }
+  static public  boolean apply$mcZI$sp (int v1)  { throw new RuntimeException(); }
+  static public  double apply$mcDI$sp (int v1)  { throw new RuntimeException(); }
+  static public  float apply$mcFI$sp (int v1)  { throw new RuntimeException(); }
+  static public  int apply$mcII$sp (int v1)  { throw new RuntimeException(); }
+  static public  long apply$mcJI$sp (int v1)  { throw new RuntimeException(); }
+  static public  void apply$mcVI$sp (int v1)  { throw new RuntimeException(); }
+  static public  boolean apply$mcZJ$sp (long v1)  { throw new RuntimeException(); }
+  static public  double apply$mcDJ$sp (long v1)  { throw new RuntimeException(); }
+  static public  float apply$mcFJ$sp (long v1)  { throw new RuntimeException(); }
+  static public  int apply$mcIJ$sp (long v1)  { throw new RuntimeException(); }
+  static public  long apply$mcJJ$sp (long v1)  { throw new RuntimeException(); }
+  static public  void apply$mcVJ$sp (long v1)  { throw new RuntimeException(); }
   public  Object messageId ()  { throw new RuntimeException(); }
   // not preceding
   public   Identify (Object messageId)  { throw new RuntimeException(); }
--- target/expected_output/basic/akka/actor/dsl/Inbox.java    2018-12-13 15:51:52.473679518 +0100
+++ target/expected_output/basic/akka/actor/dsl/Inbox.java 2018-12-13 15:51:51.473673128 +0100
@@ -2,5 +2,6 @@
 public  interface Inbox {
   public  interface InboxExtension {
     public  int DSLInboxQueueSize ()  ;
+    public  void akka$actor$dsl$Inbox$InboxExtension$_setter_$DSLInboxQueueSize_$eq (int x$1)  ;
   }
 }
